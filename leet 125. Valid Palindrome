**********첫번째 풀이**********
1. 리스트를 이용한 풀이
class Solution:
    def isPalindrome(self, s: str) -> bool:
        strs = []
        for char in s:
            if char.isalnum(): #isalnum()은 영문자, 숫자 여부를 판별하는 함수
                strs.append(char.lower())
                
        while len(strs) > 1:
            if strs.pop(0) != strs.pop():
                return False
        return True
        
2. 덱을 이용한 풀이
class Solution:
    def isPalindrome(self, s: str) -> bool:
        strs: Deque = collections.deque() #deque자료형으로 선언
        for char in s :
            if strs.append(char.lower())
            
        while len(strs) > 1:
            if strs.popleft() != strs.pop():
                return False
                
        return True
        
Q) Deque를 이용하면 list보다 속도가 빠르다 그 이유는 무엇일까?
A) 리스트의 pop(0)은 O(n)이나 deque의 양방향 삭제&삽입 연산은 O(1)안에 가능하기 때문이다.



3. 슬라이싱을 사용한 풀이
class Solution:
    def isPalindrome(self, s: str) -> bool:
        s = s.lower()
        s = re.sub('[^a-z0-9]'), '', s) #정규표현식을 이용하여 불필요한 문자 필터링
        
        return s == s[::-1] #내부적으로 C로 구현되어 있기 때문에 연산속도가 굉장히 빠르다
          
            
           
    
